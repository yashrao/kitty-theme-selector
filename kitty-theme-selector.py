import os
import subprocess
import shutil

TEMP_CONF_LAUNCH = 'temp'
MAIN_CONF = 'kitty.conf'
THEME_CONF_NAME = 'theme.conf'

# TODO: Symlink the theme instead of replacing the line

# If options is a tuple then it is an index, 
# if it is a string then it is the theme name
def change_theme(pathdest, options):
    pathdest += '/kitty.conf'
    while True:
        # TODO: add try/catch
        with open(pathdest) as f:
            lines = f.readlines()

        lines = []
        old_theme = None
        found = False
        for i in range(len(lines)):
            print(lines[i - 1])
            if '#Generated by theme-selector \n' in lines[i - 1]:
                found = True # Theme has been added using the selector
                old_theme = lines[i].replace('include ', '')
                print(old_theme) #debug
        print(old_theme) #debug

        # theme-selector include theme is missing so add it now
        if not found: 
            lines = []
            lines.append('#Generated by theme-selector \n')
            lines.append('include ' + THEME_CONF_NAME + ' \n')
            append_config(lines, MAIN_CONF)

        # theme name    
        if isinstance(options, str):
            create_symlink('themes/' + options + '.conf', THEME_CONF_NAME)
            if confirm(options):
                break
            else:
                if old_theme is not None:
                    create_symlink(old_theme, THEME_CONF_NAME)
                options = get_option() # else get the user's choice again
        # theme index number
        elif isinstance(options, tuple):
            create_symlink('themes/' + (options[1][options[0]]) + '.conf', THEME_CONF_NAME)
            if confirm(options[1][options[0]]): # If confirmed then write to the actual config
                break
            else:
                if old_theme is not None:
                    create_symlink(old_theme, THEME_CONF_NAME)
                options = get_option() # else get the user's choice again
        

# Dest should alway be THEME_CONF_NAME in this program
def create_symlink(src, dest):
    try:
        os.symlink(src, dest)
    except FileExistsError:
        # replace the link
        if os.path.isdir(dest):
            # This should never happen but just incase it overrides a folder or the current dir
            print('Cannot create link path name is a folder')
            exit(1)
        os.remove(dest)
        os.symlink(src, dest)


def append_config(lines, filename):
    with open(filename, 'a') as f:
        f.writelines(lines)

def get_option():
    print('Please select a theme:')
    # List out all the options in the themes folder
    try:
        themes = os.listdir('themes')
    except FileNotFoundError:
        print('Themes folder not found')
        print('Please place themes in ~/.config/kitty/themes')
        print('Themes available at: https://github.com/dexpota/kitty-themes.git')
        print('Exiting...')
        exit(1)
    show_options(themes)
    selection = input('Enter the name or number of the desired theme (or q to quit): ')
    if selection is 'q':
        print('quitting...')
        exit(0)
    selection = selection.replace(')', '')
    # Checking if selection is valid input
    try:
        selection = int(selection) 
        if selection > len(themes) or selection < 1:
            raise ValueError
    except ValueError:
        # Not an int so check if the string is valid
        if selection not in themes:
            print('Invalid Selection')
            print('Exiting...')
            exit(1)
        return selection

    return (selection - 1, themes) # -1 because index reference

# Takes in files as themes
def show_options(themes):
    #for theme in themes:
    for i in range(len(themes)):
        # Discard files that aren't configuration files
        if '.conf' not in themes[i]:
            continue
        themes[i] = themes[i].split('.')[0]
        print(str(i + 1) + ') ', end='')
        print(themes[i])

def create_temp_kitty_launch_file():
    #TODO: Find a better way to test out the theme appearance
    lines = ['launch bash -c "neofetch;echo This is a preview, press any key to exit preview;read -n 1 -s -r -p "..." "']
    with open(TEMP_CONF_LAUNCH, 'w') as f:
        f.writelines(lines)

def delete_files():
    os.remove(TEMP_CONF_LAUNCH)

def confirm(option):
    os.system('clear')
    FNULL = open(os.devnull, 'w')
    terminal = subprocess.Popen(['kitty', '--session', TEMP_CONF_LAUNCH], \
            close_fds=True, stdout=FNULL, stderr=subprocess.STDOUT)
    user_input = input('Confirm color scheme: {} (y/N) '.format(option))
    if user_input is 'y' or user_input is 'Y':
        terminal.kill()
        return True

    terminal.kill()
    return False

def main():
    try:
        os.chdir(str(os.path.expanduser('~')) + '/.config/kitty') # Kitty directory
    except FileNotFoundError:
        print('No kitty configuration folder found at ~/.config/kitty')
        print('Exiting...')
        exit(1)
    create_temp_kitty_launch_file()
    path = os.getcwd()
    option = get_option()
    while not option:
        option = get_option()
        change_theme(path,option)
    change_theme(path, option)
    print('Theme changed successfully')
    delete_files()

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print('\nInterrupted')
        print('No Changes Made... Exiting!')
        delete_files
        exit(1)
else:
    exit(1)